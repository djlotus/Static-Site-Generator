/*!
* 
* Utility Functions and Mixins
* 
*/

// Clear Fix
// - - - - - - - - - - - - - - - - - - - -
@mixin clearfix() {
   & {
      *zoom: 1;
   }

   &:before,
   &:after {
      content: "";
      display: table;
   }

   &:after {
      clear: both;
   }
}

// Calculate em from px
// - - - - - - - - - - - - - - - - - - - -
@function em($pixel, $context: $font-base) {
   @if (unitless($pixel)) {
      $pixel: $pixel * 1px;
   }

   @if (unitless($context)) {
      $context: $context * 1px;
   }

   @return calc($pixel / $context) * 1em;
}

// Calculate rem from px
// - - - - - - - - - - - - - - - - - - - -
@function rem($pixel, $context: $font-base) {
   @if (unitless($pixel)) {
      $pixel: $pixel * 1px;
   }

   @if (unitless($context)) {
      $context: $context * 1px;
   }

   @return calc($pixel / $context) * 1rem;
}

// Typography
// - - - - - - - - - - - - - - - - - - - -
@mixin type-setting($level: 0) {
   font-size: type-scale($level);
   line-height: line-height($level);
}

// Max Width
// - - - - - - - - - - - - - - - - - - - -
@mixin max-width() {
   max-width: $global-width + px;
}

// Row Reset
// - - - - - - - - - - - - - - - - - - - -
@mixin row-reset() {
   max-width: 100% !important;
   margin: 0 !important;
}

// Padding
// - - - - - - - - - - - - - - - - - - - -
@mixin padding($padding: $global-padding) {
   @if type-of($padding) != "number" {
      padding: $padding;
   } @else if type-of($padding) == "number" {
      @if (unitless($padding)) {
         // prevent confusion with unitless pixel values
         @if $padding <=$max-unitless-value {
            // prevent unit from being added to value of "0"
            @if $padding==0 {
               padding: 0;
            } @else {
               padding: $padding + $preferred-unit;
            }
         } @else {
            padding: em($padding);
         }
      } @else {
         padding: $padding;
      }
   }
}

@mixin padding-top($padding: $global-padding) {
   @if type-of($padding) != "number" {
      padding-top: $padding;
   } @else if type-of($padding) == "number" {
      @if (unitless($padding)) {
         // prevent confusion with unitless pixel values
         @if $padding <=$max-unitless-value {
            // prevent unit from being added to value of "0"
            @if $padding==0 {
               padding-top: 0;
            } @else {
               padding-top: $padding + $preferred-unit;
            }
         } @else {
            padding-top: em($padding);
         }
      } @else {
         padding-top: $padding;
      }
   }
}

@mixin padding-right($padding: $global-padding) {
   @if type-of($padding) != "number" {
      padding-right: $padding;
   } @else if type-of($padding) == "number" {
      @if (unitless($padding)) {
         // prevent confusion with unitless pixel values
         @if $padding <=$max-unitless-value {
            // prevent unit from being added to value of "0"
            @if $padding==0 {
               padding-right: 0;
            } @else {
               padding-right: $padding + $preferred-unit;
            }
         } @else {
            padding-right: em($padding);
         }
      } @else {
         padding-right: $padding;
      }
   }
}

@mixin padding-bottom($padding: $global-padding) {
   @if type-of($padding) != "number" {
      padding-bottom: $padding;
   } @else if type-of($padding) == "number" {
      @if (unitless($padding)) {
         // prevent confusion with unitless pixel values
         @if $padding <=$max-unitless-value {
            // prevent unit from being added to value of "0"
            @if $padding==0 {
               padding-bottom: 0;
            } @else {
               padding-bottom: $padding + $preferred-unit;
            }
         } @else {
            padding-bottom: em($padding);
         }
      } @else {
         padding-bottom: $padding;
      }
   }
}

@mixin padding-left($padding: $global-padding) {
   @if type-of($padding) != "number" {
      padding-left: $padding;
   } @else if type-of($padding) == "number" {
      @if (unitless($padding)) {
         // prevent confusion with unitless pixel values
         @if $padding <=$max-unitless-value {
            // prevent unit from being added to value of "0"
            @if $padding==0 {
               padding-left: 0;
            } @else {
               padding-left: $padding + $preferred-unit;
            }
         } @else {
            padding-left: em($padding);
         }
      } @else {
         padding-left: $padding;
      }
   }
}

// Margin
// - - - - - - - - - - - - - - - - - - - -
@mixin margin($margin: $global-margin) {
   @if type-of($margin) != "number" {
      margin: $margin;
   } @else if type-of($margin) == "number" {
      @if (unitless($margin)) {
         // prevent confusion with unitless pixel values
         @if $margin <=$max-unitless-value {
            @if $margin==0 {
               margin: 0;
            } @else {
               margin: $margin + $preferred-unit;
            }
         } @else {
            margin: em($margin);
         }
      } @else {
         margin: $margin;
      }
   }
}

@mixin margin-top($margin: $global-margin) {
   @if type-of($margin) != "number" {
      margin-top: $margin;
   } @else if type-of($margin) == "number" {
      @if (unitless($margin)) {
         @if $margin <=$max-unitless-value {
            @if $margin==0 {
               margin-top: 0;
            } @else {
               margin-top: $margin + $preferred-unit;
            }
         } @else {
            margin-top: em($margin);
         }
      } @else {
         margin-top: $margin;
      }
   }
}

@mixin margin-right($margin: $global-margin) {
   @if type-of($margin) != "number" {
      margin-right: $margin;
   } @else if type-of($margin) == "number" {
      @if (unitless($margin)) {
         @if $margin <=$max-unitless-value {
            @if $margin==0 {
               margin-right: 0;
            } @else {
               margin-right: $margin + $preferred-unit;
            }
         } @else {
            margin-right: em($margin);
         }
      } @else {
         margin-right: $margin;
      }
   }
}

@mixin margin-bottom($margin: $global-margin) {
   @if type-of($margin) != "number" {
      margin-bottom: $margin;
   } @else if type-of($margin) == "number" {
      @if (unitless($margin)) {
         @if $margin <=$max-unitless-value {
            @if $margin==0 {
               margin-bottom: 0;
            } @else {
               margin-bottom: $margin + $preferred-unit;
            }
         } @else {
            margin-bottom: em($margin);
         }
      } @else {
         margin-bottom: $margin;
      }
   }
}

@mixin margin-left($margin: $global-margin) {
   @if type-of($margin) != "number" {
      margin-left: $margin;
   } @else if type-of($margin) == "number" {
      @if (unitless($margin)) {
         @if $margin <=$max-unitless-value {
            @if $margin==0 {
               margin-left: 0;
            } @else {
               margin-left: $margin + $preferred-unit;
            }
         } @else {
            margin-left: em($margin);
         }
      } @else {
         margin-left: $margin;
      }
   }
}

// TODO :: incorporate this or delete
// Navigation Alignment
// - - - - - - - - - - - - - - - - - - - -
@function nav-align($flex-align: $navigation-align) {
   @if map-has-key($navigation-align-map, $flex-align) {
      @return map-get($navigation-align-map, $flex-align);
   }

   @if not map-has-key ($navigation-align-map) {
      @error "Could not reconcile navigation alignment";
   }
}

// Color Adjustments
// - - - - - - - - - - - - - - - - - - - -
@function lighten($color, $percentage) {
   @return mix(white, $color, $percentage);
}

@function darken($color, $percentage) {
   @return mix(black, $color, $percentage);
}

// Power
// - - - - - - - - - - - - - - - - - - - -
@function pow($x, $y) {
   $ret: 1;

   @if $y > 0 {
      @for $i from 1 through $y {
         $ret: $ret * $x;
      }
   } @else {
      @for $i from $y to 0 {
         $ret: calc($ret / $x);
      }
   }

   @return $ret;
}

// CSS Grid
// - - - - - - - - - - - - - - - - - - - -
@mixin css-grid(
   $grid-rows: $grid-template-rows,
   $grid-columns: $grid-template-columns,
   $grid-gap-row: 0,
   $grid-gap-column: 0
) {
   margin: 0 auto;
   @include padding();
   // grid styles
   display: grid;
   grid-template-columns: repeat($grid-template-rows, 1fr);
   grid-template-rows: repeat($grid-template-rows, 1fr);
   grid-column-gap: $grid-gap-column;
   grid-row-gap: $grid-gap-row;
   place-content: start;
}

// Transitions
// - - - - - - - - - - - - - - - - - - - -
@mixin transition(
   $transition-timing-function: linear,
   $transition-duration: 100ms,
   $transition-property: all
) {
   -moz-transition: $transition-timing-function $transition-duration
      $transition-property;
   -o-transition: $transition-timing-function $transition-duration
      $transition-property;
   -webkit-transition: $transition-timing-function $transition-duration
      $transition-property;
   transition: $transition-timing-function $transition-duration
      $transition-property;
}

// TODO :: Convert all flexbox elements to use this mixin
// Flexbox
// - - - - - - - - - - - - - - - - - - - -
@mixin displayMode($displayMode) {
   @if $displayMode == flex {
      display: flex;
   } @else if $displayMode == inline-flex {
      display: inline-flex;
   } @else {
      /* Default value */
      display: flex; /* Default value */
   }
}

@mixin justifyContent($justifyContent) {
   @if $justifyContent == flex-start {
      justify-content: flex-start;
   } @else if $justifyContent == flex-end {
      justify-content: flex-end;
   } @else if $justifyContent == center {
      justify-content: center;
   } @else if $justifyContent == space-between {
      justify-content: space-between;
   } @else if $justifyContent == space-around {
      justify-content: space-around;
   } @else if $justifyContent == initial {
      justify-content: initial;
   } @else if $justifyContent == inherit {
      justify-content: inherit;
   } @else {
   }
}

@mixin alignItems($alignItems) {
   @if $alignItems == flex-start {
      align-items: flex-start;
   } @else if $alignItems == flex-end {
      align-items: flex-end;
   } @else if $alignItems == center {
      align-items: center;
   } @else if $alignItems == stretch {
      align-items: stretch;
   } @else if $alignItems == baseline {
      align-items: baseline;
   } @else if $alignItems == initial {
      align-items: initial;
   } @else if $alignItems == inherit {
      align-items: inherit;
   } @else {
   }
}

@mixin flexDirection($flexDirection) {
   @if $flexDirection == row {
      flex-direction: row;
   } @else if $flexDirection == row-reverse {
      flex-direction: row-reverse;
   } @else if $flexDirection == column {
      flex-direction: column;
   } @else if $flexDirection == column-reverse {
      flex-direction: column-reverse;
   } @else if $flexDirection == initial {
      flex-direction: initial;
   } @else if $flexDirection == inherit {
      flex-direction: inherit;
   } @else {
   }
}

@mixin flexWrap($flexWrap) {
   @if $flexWrap == no-wrap {
      flex-wrap: no-wrap;
   } @else if $flexWrap == wrap {
      flex-wrap: wrap;
   } @else if $flexWrap == wrap-reverse {
      flex-wrap: wrap-reverse;
   } @else {
   }
}

@mixin flexBox(
   $displayMode: null,
   $justifyContent: null,
   $alignItems: null,
   $flexDirection: null,
   $flexWrap: null
) {
   @include displayMode($displayMode);
   @include justifyContent($justifyContent);
   @include alignItems($alignItems);
   @include flexDirection($flexDirection);
   @include flexWrap($flexWrap);
}
